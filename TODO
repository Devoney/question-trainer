General:
  ☐ Use confirmation dialog as a service to the whole application, instead of having it in each table.
  Books:
    ☐ Refactoring getting questions of a book to the Book model itself.
    ☐ When a book is removed, its questions need to go out of the question list.
      Do this by using the pubsub event pattern. No book component should be concerned with the question list.
      The question list, however, should be. Therefore the book component should raise an event that the the book was removed.
      And the question list component should take care of removing the questions by itself.
    ☐ Use store to validate book title, instead of event and property.
    ☐ Move logic for adding book into AddBook itself, out of BookManager to simply ping ponging of data.
  Chapters:
    ☐ Add-or-remove all questions in a chapter to/from the question list.
  State:
    ☐ Make getter types available.
    ☐ Move mutations in to modules based on models or components.
Testing:
    ☐ Mock the store when testing for book, chapter and question to be deleted.